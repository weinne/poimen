package br.com.poimen.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AppointmentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppointmentAllPropertiesEquals(Appointment expected, Appointment actual) {
        assertAppointmentAutoGeneratedPropertiesEquals(expected, actual);
        assertAppointmentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppointmentAllUpdatablePropertiesEquals(Appointment expected, Appointment actual) {
        assertAppointmentUpdatableFieldsEquals(expected, actual);
        assertAppointmentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppointmentAutoGeneratedPropertiesEquals(Appointment expected, Appointment actual) {
        assertThat(expected)
            .as("Verify Appointment auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppointmentUpdatableFieldsEquals(Appointment expected, Appointment actual) {
        assertThat(expected)
            .as("Verify Appointment relevant properties")
            .satisfies(e -> assertThat(e.getSubject()).as("check subject").isEqualTo(actual.getSubject()))
            .satisfies(e -> assertThat(e.getStartTime()).as("check startTime").isEqualTo(actual.getStartTime()))
            .satisfies(e -> assertThat(e.getEndTime()).as("check endTime").isEqualTo(actual.getEndTime()))
            .satisfies(e -> assertThat(e.getNotes()).as("check notes").isEqualTo(actual.getNotes()))
            .satisfies(e -> assertThat(e.getLocal()).as("check local").isEqualTo(actual.getLocal()))
            .satisfies(e -> assertThat(e.getAppointmentType()).as("check appointmentType").isEqualTo(actual.getAppointmentType()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAppointmentUpdatableRelationshipsEquals(Appointment expected, Appointment actual) {
        assertThat(expected)
            .as("Verify Appointment relationships")
            .satisfies(e -> assertThat(e.getChurch()).as("check church").isEqualTo(actual.getChurch()))
            .satisfies(e -> assertThat(e.getMember()).as("check member").isEqualTo(actual.getMember()))
            .satisfies(e -> assertThat(e.getService()).as("check service").isEqualTo(actual.getService()))
            .satisfies(e -> assertThat(e.getGroup()).as("check group").isEqualTo(actual.getGroup()))
            .satisfies(e -> assertThat(e.getCounselingSession()).as("check counselingSession").isEqualTo(actual.getCounselingSession()))
            .satisfies(e -> assertThat(e.getUser()).as("check user").isEqualTo(actual.getUser()));
    }
}
