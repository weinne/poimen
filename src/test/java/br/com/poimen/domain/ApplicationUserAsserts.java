package br.com.poimen.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ApplicationUserAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertApplicationUserAllPropertiesEquals(ApplicationUser expected, ApplicationUser actual) {
        assertApplicationUserAutoGeneratedPropertiesEquals(expected, actual);
        assertApplicationUserAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertApplicationUserAllUpdatablePropertiesEquals(ApplicationUser expected, ApplicationUser actual) {
        assertApplicationUserUpdatableFieldsEquals(expected, actual);
        assertApplicationUserUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the derived primary key is set correctly.
     *
     * @param entityToPersist the entity used to persist
     * @param persisted the persisted entity
     */
    public static void assertApplicationUserMapsIdRelationshipPersistedValue(ApplicationUser entityToPersist, ApplicationUser persisted) {
        // Validate the id for MapsId, the ids must be same
        assertThat(entityToPersist.getInternalUser().getId()).isEqualTo(persisted.getId());
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertApplicationUserAutoGeneratedPropertiesEquals(ApplicationUser expected, ApplicationUser actual) {
        assertThat(expected)
            .as("Verify ApplicationUser auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertApplicationUserUpdatableFieldsEquals(ApplicationUser expected, ApplicationUser actual) {
        assertThat(expected)
            .as("Verify ApplicationUser relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertApplicationUserUpdatableRelationshipsEquals(ApplicationUser expected, ApplicationUser actual) {
        assertThat(expected)
            .as("Verify ApplicationUser relationships")
            .satisfies(e -> assertThat(e.getChurch()).as("check church").isEqualTo(actual.getChurch()));
    }
}
