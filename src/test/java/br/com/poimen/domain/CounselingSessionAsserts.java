package br.com.poimen.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CounselingSessionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCounselingSessionAllPropertiesEquals(CounselingSession expected, CounselingSession actual) {
        assertCounselingSessionAutoGeneratedPropertiesEquals(expected, actual);
        assertCounselingSessionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCounselingSessionAllUpdatablePropertiesEquals(CounselingSession expected, CounselingSession actual) {
        assertCounselingSessionUpdatableFieldsEquals(expected, actual);
        assertCounselingSessionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCounselingSessionAutoGeneratedPropertiesEquals(CounselingSession expected, CounselingSession actual) {
        assertThat(expected)
            .as("Verify CounselingSession auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCounselingSessionUpdatableFieldsEquals(CounselingSession expected, CounselingSession actual) {
        assertThat(expected)
            .as("Verify CounselingSession relevant properties")
            .satisfies(e -> assertThat(e.getSubject()).as("check subject").isEqualTo(actual.getSubject()))
            .satisfies(e -> assertThat(e.getDate()).as("check date").isEqualTo(actual.getDate()))
            .satisfies(e -> assertThat(e.getStartTime()).as("check startTime").isEqualTo(actual.getStartTime()))
            .satisfies(e -> assertThat(e.getEndTime()).as("check endTime").isEqualTo(actual.getEndTime()))
            .satisfies(e -> assertThat(e.getNotes()).as("check notes").isEqualTo(actual.getNotes()))
            .satisfies(e -> assertThat(e.getCounselingTasks()).as("check counselingTasks").isEqualTo(actual.getCounselingTasks()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCounselingSessionUpdatableRelationshipsEquals(CounselingSession expected, CounselingSession actual) {
        assertThat(expected)
            .as("Verify CounselingSession relationships")
            .satisfies(e -> assertThat(e.getChurch()).as("check church").isEqualTo(actual.getChurch()))
            .satisfies(e -> assertThat(e.getMember()).as("check member").isEqualTo(actual.getMember()))
            .satisfies(e -> assertThat(e.getUser()).as("check user").isEqualTo(actual.getUser()));
    }
}
