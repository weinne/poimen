package br.com.poimen.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class WorshipEventAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWorshipEventAllPropertiesEquals(WorshipEvent expected, WorshipEvent actual) {
        assertWorshipEventAutoGeneratedPropertiesEquals(expected, actual);
        assertWorshipEventAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWorshipEventAllUpdatablePropertiesEquals(WorshipEvent expected, WorshipEvent actual) {
        assertWorshipEventUpdatableFieldsEquals(expected, actual);
        assertWorshipEventUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWorshipEventAutoGeneratedPropertiesEquals(WorshipEvent expected, WorshipEvent actual) {
        assertThat(expected)
            .as("Verify WorshipEvent auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWorshipEventUpdatableFieldsEquals(WorshipEvent expected, WorshipEvent actual) {
        assertThat(expected)
            .as("Verify WorshipEvent relevant properties")
            .satisfies(e -> assertThat(e.getDate()).as("check date").isEqualTo(actual.getDate()))
            .satisfies(e -> assertThat(e.getTitle()).as("check title").isEqualTo(actual.getTitle()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getWorshipType()).as("check worshipType").isEqualTo(actual.getWorshipType()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWorshipEventUpdatableRelationshipsEquals(WorshipEvent expected, WorshipEvent actual) {
        assertThat(expected)
            .as("Verify WorshipEvent relationships")
            .satisfies(e -> assertThat(e.getChurch()).as("check church").isEqualTo(actual.getChurch()))
            .satisfies(e -> assertThat(e.getHymns()).as("check hymns").isEqualTo(actual.getHymns()))
            .satisfies(e -> assertThat(e.getSchedules()).as("check schedules").isEqualTo(actual.getSchedules()));
    }
}
